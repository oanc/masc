/*
 * This script loads all GrAF documents into a Gate corpus and saves them
 * to a Gate DataStore for viewing in Gate.
 *
 * USAGE: grate masc3ds.gr8 <mascDir> <dataStoreDir>
 *
 * mascDir the path to the MASC data files. The path can be relative to the 
 *		script or specified as an absolute path.
 * dataStoreDir The directory where the Gate DataStore will be created. If the
 *		dataStoreDir does not exist it will be created. If the directory exists
 *		and already contains a Gate data store the script will terminate.
 *
 */

import gate.*
import org.xces.graf.io.*
import org.xces.graf.io.dom.*

if (this.args.size() != 2)
{
	println "USAGE: grate mascds.gr8 /path/to/corpus /path/to/datastore"
	return
}

// Location of the corpus to process
File corpusDir = new File(this.args[0])
File data = new File(corpusDir, "data")
File headerFile = new File(corpusDir, "resource-header.xml")

// Where the Gate datastore will be saved.
File dsDir = new File(this.args[1])

if (!corpusDir.exists())
{
	println "MASC directory not found."
	return
}

if (!dsDir.exists() && !dsDir.mkdirs())
{
	println "Unable to create the data store directory."
	return
}

// The Gate processing resource used to load GrAF standoff annotation files.
def loadPR = newResource('org.anc.gate.LoadGrafStandoff') {
	resourceHeader(headerFile.toURI().toURL())
}

// The index is used to map text files to their headers and simply
// saves us a bunch of string substitutions/replacements when trying
// to derive the paths to standoff annotation files.
def index = [:]

def corpus = newCorpus('MASC 3.0.0') {
	// Add each text file to the corpus and the index.
	corpusDir.eachDirRecurse { dir ->
		dir.eachFileMatch(~/.*.txt/) {
			File hdrFile = new File(it.parentFile, it.name.replace(".txt", ".hdr"))
			if (hdrFile.exists())
			{
				index[it.toURI().toURL()] = hdrFile
			}		
			addDocument(it)			
		}
	}
}

// Create the datastore for the corpus.
def ds = newSerialDataStore(dsDir)
def persistedCorpus = ds.adopt(corpus, null)

// Now process the annotation types for each document in the corpus.
corpus.each { doc ->
	println "Corpus document ${doc.sourceUrl}"
	// Check if the file is in in the index
	File hdrFile = index[doc.sourceUrl]
	if (hdrFile)
	{
		// Now try to load each annotation type for this file.
		def directory = hdrFile.parentFile
		def header = new DocumentHeader(hdrFile)
		//def types = header.getAnnotationTypes()
		header.annotationTypes.each { type ->
			def soFilename = header.getAnnotationLocation(type)
			def soFile = new File(directory, soFilename)
			if (soFile.exists())
			{
				// We have found a standoff annotation file. Run the
				// LoadGrafStandoff PR on the document
				println "   Loading ${soFile.name}"
				loadPR.document = doc
				loadPR.standoffASName = type
				loadPR.sourceUrl = soFile.toURI().toURL()
				loadPR.execute()
			}
		}
	}
	else
	{
		println "${doc.sourceUrl} not found in the index."
	}
}

// Persist our changes to the data store.
ds.sync(persistedCorpus)
ds.close()

// The annotations will now be available in Gate.
println "Done."