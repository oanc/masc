/**
 * This script checks the dependsOn entries in each file and ensures the file id values
 * used are correct.
 */
import org.anc.io.*

class Printer
{	
	PrintWriter writer
	XmlNodePrinter printer
	
	public Printer(File file)
	{
		writer = new PrintWriter(file, 'UTF-8')
		printer = new XmlNodePrinter(writer)
		printer.setPreserveWhitespace(true)
		printer.setNamespaceAware(true)
	}
	
	void print(node)
	{
		printer.print(node)
		writer.flush()
		writer.close()
	}
}

if (this.args.size() != 1)
{
	println "USAGE: grate fixIds.gr8 /path/to/corpus"
	return 1
}

println "Running."
File root = new File(this.args[0])
File data = new File(root, "data")
File headerFile = new File(root, "resource-header.xml")

if (!root.exists())
{
	println "Specified directory does not exist"
	return 1
}

if (!data.exists())
{
	println "Data directory not found."
	return 1
}

//File test = new File(data, "spoken/face-to-face")
//if (!test.exists())
//{
//	println "Test directory not found."
//	return 1
//}
//println "Test is ${test.path}"

XmlParser parser = new XmlParser(false, false)
data.eachDirRecurse { dir ->
	//println "Scanning ${dir.path}"
	dir.eachFileMatch(~/.*.xml/) { file ->
		//println "Processing ${file}"
		boolean modified = false
		def graph = parser.parse(file)
		graph.graphHeader.dependencies.dependsOn.each { dep ->
			String attValue = dep.@"f.id"
			//println "$attValue"
			if (!attValue.startsWith('f.'))
			{
				dep.@"f.id" = "f.${attValue}"
				modified = true
			}
		}
		if (modified)
		{
			println "Writing ${file.path}"
			Printer printer = new Printer(file)
			printer.print(graph)
		}
		else
		{
			println "No changes needed to ${file.path}"
		}
	}
	dir.eachFileMatch(~/.*.hdr/) { header ->
		def documentHeader = parser.parse(header)
		documentHeader.profileDesc.primaryData[0].@"f.id" = 'f.text'
		documentHeader.profileDesc.annotations.annotation.each { a->
			String attValue = a.@"f.id"
			if (!attValue.startsWith('f.'))
			{
				a.@"f.id" = "f.${attValue}"
			}
		}
		println "Writing ${header.path}"
		Printer printer = new Printer(header)
		printer.print(documentHeader)
	}
}